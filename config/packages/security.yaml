security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # main:
        #     lazy: true
        #     provider: app_user_provider
        
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            jwt: ~
            

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    # role hierarchy
    role_hierarchy:
        ROLE_USER: ROLE_USER
        ROLE_ADMIN: ROLE_ADMIN
        ROLE_CREATOR: ROLE_CREATOR
    access_control:
        - { path: ^/api/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/campagne/add, roles: PUBLIC_ACCESS }
        - { path: ^/api/card/checkout, roles: PUBLIC_ACCESS }
        - { path: ^/checkout, roles: PUBLIC_ACCESS }
        - { path: ^/api/success_payment', roles: PUBLIC_ACCESS }
        - { path: ^/api/list/shop', roles: PUBLIC_ACCESS }
        - { path: ^/api/shop/product/details', roles: PUBLIC_ACCESS }
        - { path: ^/api/user, roles: ROLE_USER }
        - { path: ^/api/account/update, roles: ROLE_USER }
        - { path: ^/api/account/change_password, roles: ROLE_USER }
        - { path: ^/api/order/list, roles: ROLE_USER }
        - { path: ^/api/account/creator/profile, roles: ROLE_CREATOR }
        - { path: ^/api/account/creator/update, roles: ROLE_CREATOR }
        - { path: ^/api/account/campagne/list, roles: ROLE_CREATOR }
        - { path: ^/api/account/creator/settings/update', roles: ROLE_CREATOR }
        - { path: ^/api/admin/order/print, roles: ROLE_ADMIN }
        - { path: ^/api/admin/order/list, roles: ROLE_ADMIN }
        - { path: ^/api/admin/order/detail, roles: ROLE_ADMIN }
        - { path: ^/api/admin/list/campagnes, roles: ROLE_ADMIN }
        - { path: ^/api/admin/campagne/download, roles: ROLE_ADMIN }
        - { path: ^/api/admin/campagne/detail, roles: ROLE_ADMIN }
        - { path: ^/api/admin/campagne/reject, roles: ROLE_ADMIN }
        - { path: ^/api/admin/list/users, roles: ROLE_ADMIN }
        - { path: ^/api/admin/user/detail, roles: ROLE_ADMIN }''
        - { path: ^/api/admin/user/delete, roles: ROLE_ADMIN }
        - { path: ^/api/admin/add/user, roles: ROLE_ADMIN }
        - { path: ^/api/admin/user/send/email, roles: ROLE_ADMIN }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
